[{"text":"Проще говоря, данные могут быть фактами, относящимися к любому рассматриваемому объекту. Например, ваше имя, возраст, рост, вес и т.д. являются некоторыми данными, относящимися к вам. Изображение, файл, pdf и т.д. также могут считаться данными.","topic":"Введение","header":"Что такое данные?"},{"text":"База данных - это систематический набор данных. Он поддерживает электронное хранение и обработку данных. Базы данных служат для управления данными.\n\nДавайте обсудим пример базы данных: онлайн телефонный справочник использует базу данных для хранения данных о людях, телефонных номерах и других контактных данных. Ваш поставщик услуг электроснабжения использует базу данных для управления счетами, проблемами, связанными с клиентами, обработки данных о неисправностях и т.д. \n\nДавайте также рассмотрим Facebook. Он должен хранить, обрабатывать и представлять данные, связанные с пользователями, их друзьями, сообщениями, рекламой и многим другим. Мы можем предоставить бесчисленное количество примеров использования баз данных.","topic":"Введение","header":"Что такое база данных?"},{"text":"SQL (ˈɛsˈkjuˈɛl; англ. structured query language — «язык структурированных запросов») — декларативный язык программирования, применяемый для создания, модификации и управления данными в реляционной базе данных, управляемой соответствующей системой управления базами данных.\nЯвляется, прежде всего, информационно-логическим языком, предназначенным для описания, изменения и извлечения данных, хранимых в реляционных базах данных. SQL считается языком программирования, в общем случае (без ряда современных расширений) не является тьюринг-полным, но вместе с тем стандарт языка спецификацией SQL/PSM предусматривает возможность его процедурных расширений.\n\nИзначально SQL был основным способом работы пользователя с базой данных и позволял выполнять следующий набор операций:\n\n создание в базе данных новой таблицы;\n добавление в таблицу новых записей;\n изменение записей;\n удаление записей;\n выборка записей из одной или нескольких таблиц (в соответствии с заданным условием);\n изменение структур таблиц.","topic":"SQL","header":"SQL"},{"text":"Как вы уже знаете, SQL - это язык, используемый для работы с различными типами данных, организованными в таблицу.\n\nОбычно значения данных из одного и того же столбца в таблице имеют одинаковое значение и тип. Например, таблица Car может содержать следующие столбцы: год производства, цвет, лошадиные силы, цена и столбец, указывающий, является ли автомобиль электрическим. Год производства и лошадиные силы являются целочисленными значениями (INTEGER), цвет представляет собой строку (VARCHAR), цена - число с плавающей точкой (DECIMAL) и проверка типа автомобиля - логическую переменную (BOOLEAN). \nБазы данных SQL обычно требуют, чтобы каждый столбец в таблице базы данных имел имя и тип данных. Тип данных столбца ограничивает набор значений, которые могут быть сохранены в столбце, и определяет набор возможных операций с ними. ","topic":"SQL","header":"Базовые типы данных"},{"text":"Чаще всего числа в языке SQL представлены следующими типами: INTEGER, REAL и DECIMAL\n\nINTEGER - это числовой тип данных, представляющий некоторый диапазон математических целых чисел. Обычно системы управления базами данных поддерживают диапазон от -2147483648 до +2147483647, чего достаточно для большинства бизнес-задач.\nТип INTEGER подходит для счетчиков, числовых идентификаторов и любых целочисленных бизнес-значений, которые вы можете себе представить, которые соответствуют диапазону шкалы. Например, в базе данных рекламной компании у вас может быть таблица, в которой хранится идентификатор баннера, количество кликов по нему и количество показов баннера: все в столбцах INTEGER. \n\nЧисловые данные, конечно, выходят за рамки целочисленных значений: например, рассмотрим расстояние от Земли до Марса (225,0e + 06 км), количество лейкоцитов в крови (от 1,2e + 09 до 3,0e + 09 на литр). , или масса электрона (9.10938356e-31 кг). Для таких реальных значений в SQL есть специальный тип данных с интуитивно понятным именем REAL. Этот тип данных часто называют FLOAT, что отражает способ хранения чисел внутри: используется экспоненциальная форма, и поэтому десятичная точка может «плавать», то есть ее можно размещать где угодно относительно значащих цифр числа.\nЭтот числовой тип обычно называется неточным, потому что некоторые значения хранятся в виде приближений (например, 0,1), поэтому сохранение и получение значения не всегда может работать так, как вы ожидаете. Таким образом, если вам требуется точное хранилище и вычисления (например, для базы данных биллинга), REAL - не ваш выбор. Однако данные типа REAL часто встречаются в системах, которые работают с очень маленькими и очень большими действительными числами и требуют быстрой обработки. Например, расстояние между галактиками или диаметр атомного ядра можно сохранить в одном столбце типа REAL.\n\nВ повседневной жизни мы обычно довольно часто сталкиваемся с десятичными числами: например, при измерении температуры тела (36,6 градуса Цельсия) или веса (52,7 кг), при оценке высоты знаменитой Пизанской башни (55,86 м) и, конечно же, , считая наши драгоценные финансы (103050,79 $). SQL поддерживает специальный тип данных для таких значений - DECIMAL (точность, масштаб).\nКак видите, у этого типа есть два параметра: точность и масштаб. Масштаб определяет количество цифр в дробной части справа от десятичной точки. Точность - это общее количество цифр в числе, то есть по обе стороны от десятичной точки. Масштаб, как вы могли заключить, не может превышать точности.\nНа тип DECIMAL обычно ссылаются как на точный числовой тип с неограниченной точностью и масштабом; однако существует ограничение - до 131072 цифр до десятичной точки и до 16383 цифр после десятичной точки. Если подумать, этого должно быть достаточно!\n\nОдно из наиболее важных различий между типами DECIMAL и REAL для приложений - это правила округления. Значения DECIMAL округляются интуитивно и предсказуемо, например, округление -0,5 приведет к -1. Правила округления для типа данных REAL могут быть менее интуитивными, и здесь округление -0,5 даст нам -0. Однако арифметические операции с типами REAL выполняются быстрее, а сами значения занимают меньше места для хранения. \n","topic":"Типы данных","header":"Численные типы данных"},{"text":"Тип BOOLEAN представляет значения логической логики (истины): ИСТИНА (TRUE) или ЛОЖЬ (FALSE). Этот простой тип данных можно использовать для любых атрибутов с семантикой флага, например, посещал ли клиент сайт конкурента и т.п. ","topic":"Типы данных","header":"Логический тип данных"},{"text":"Практически в любой программе или сценарии анализа данных вы должны работать с постоянными значениями, называемыми литералами. Например, если вы анализируете данные переписи и вам нужно извлечь строки переписи в соответствии с определенными критериями (люди по имени Джесси, родившиеся между 1920 и 2000 годами), вам часто приходится использовать литералы (Jessie, 1920 и 2000).\n\nВ этом разделе мы обсудим три основных типа литералов: числовые, строковые и логические. Чтобы сразу применить полученные знания, напишем программу, выводящую «Hello world!». ","topic":"Типы данных","header":"Литералы"},{"text":"Строковая константа в SQL - это последовательность символов, заключенная в одинарные (') или двойные (\") кавычки, например « Hello world!» и «SQL (язык структурированных запросов)». Чтобы включить символ одинарной кавычки внутри строкового литерала, заключенного в одинарные кавычки, введите две смежные одинарные кавычки, например, 'Jessie''s birthday'. Либо заключите литерал в двойные кавычки, чтобы одинарная кавычка считалась обычным символом. Например, \"Jessie's birthday\".","topic":"Типы данных","header":"Строковые литералы"},{"text":"Числовые литералы могут быть положительными или отрицательными числами, заданными как целые (например, 1, +9000, -256), десятичные (например, 2,3, +876,234, -1024,0) или действительные значения в экспоненциальной записи (например, 0,4. e3, + 7.192834e + 10, -4.0e-5). Если вы не укажете знак, по умолчанию предполагается положительное число.\n\nЧисловые литералы могут быть INTEGER, REAL и DECIMAL; система управления данными автоматически определяет его тип в зависимости от контекста. Например, если вы укажете числовое значение без десятичной точки, которое соответствует диапазону значений INTEGER, система будет рассматривать его как INTEGER, а в противном случае - как DECIMAL. Числовые значения, указанные в экспоненциальном представлении, обрабатываются как данные REAL.\n\nВы можете напрямую указать тип литерала, используя функцию CAST (значение AS тип). Вместо значения-заполнителя и типа вы можете использовать свой литерал и тип, например, код:\n\nSELECT\n    CAST(1 AS DECIMAL(20,3));\n\nинтерпретирует числовое значение 1 как DECIMAL (20,3). Конечно, вы можете указать только осмысленное приведение типов: например, CAST (123.4 AS INTEGER) вызовет ошибку. ","topic":"Типы данных","header":"Числовые литералы"},{"text":"Теперь мы готовы написать традиционное \"Hello, World!\" программа. Этот код SQL (фактически, единственный запрос) реализует его:\n\nSELECT 'Hello, World!';\n\nРезультат запроса следующий (его фактическое представление может отличаться в зависимости от среды, в которой он выполняется):\n\nHello, World!\n\nСобственно, запрос декларативно заявляет, что мы хотим выделить именно эту строку в результате. Оператор состоит из 3 частей: ключевого слова SELECT (без учета регистра), литерала, который мы хотим получить, и точки с запятой, определяющей конец запроса.\n\nПодводя итог, простой SQL-запрос, извлекающий любой литерал, будь то строковый, числовой или логический, выглядит следующим образом (вы можете заменить литерал любой правильно указанной константой):\n\nSELECT литерал;\n\nТеперь вы знаете, как определять числовые, строковые и логические значения констант и сказать «Привет, данные!» - и даже больше - с помощью SQL. ","topic":"Типы данных","header":"Hello, World!"},{"text":"Тест","topic":"Тест","header":"Тест"}]